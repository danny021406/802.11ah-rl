// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ns3opengym {

namespace {

const ::google::protobuf::Descriptor* SpaceDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpaceDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscreteSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscreteSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* TupleSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TupleSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscreteDataContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscreteDataContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxDataContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxDataContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TupleDataContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TupleDataContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictDataContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictDataContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimInitMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInitMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimInitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInitAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnvStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvStateMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvStateMsg_Reason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnvActMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvActMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SpaceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Dtype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  SpaceDescription_descriptor_ = file->message_type(0);
  static const int SpaceDescription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpaceDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpaceDescription, space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpaceDescription, name_),
  };
  SpaceDescription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpaceDescription_descriptor_,
      SpaceDescription::default_instance_,
      SpaceDescription_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpaceDescription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpaceDescription, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpaceDescription, _is_default_instance_));
  DiscreteSpace_descriptor_ = file->message_type(1);
  static const int DiscreteSpace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscreteSpace, n_),
  };
  DiscreteSpace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DiscreteSpace_descriptor_,
      DiscreteSpace::default_instance_,
      DiscreteSpace_offsets_,
      -1,
      -1,
      -1,
      sizeof(DiscreteSpace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscreteSpace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscreteSpace, _is_default_instance_));
  BoxSpace_descriptor_ = file->message_type(2);
  static const int BoxSpace_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxSpace, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxSpace, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxSpace, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxSpace, shape_),
  };
  BoxSpace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoxSpace_descriptor_,
      BoxSpace::default_instance_,
      BoxSpace_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoxSpace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxSpace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxSpace, _is_default_instance_));
  TupleSpace_descriptor_ = file->message_type(3);
  static const int TupleSpace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleSpace, element_),
  };
  TupleSpace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TupleSpace_descriptor_,
      TupleSpace::default_instance_,
      TupleSpace_offsets_,
      -1,
      -1,
      -1,
      sizeof(TupleSpace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleSpace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleSpace, _is_default_instance_));
  DictSpace_descriptor_ = file->message_type(4);
  static const int DictSpace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictSpace, element_),
  };
  DictSpace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DictSpace_descriptor_,
      DictSpace::default_instance_,
      DictSpace_offsets_,
      -1,
      -1,
      -1,
      sizeof(DictSpace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictSpace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictSpace, _is_default_instance_));
  DataContainer_descriptor_ = file->message_type(5);
  static const int DataContainer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataContainer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataContainer, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataContainer, name_),
  };
  DataContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataContainer_descriptor_,
      DataContainer::default_instance_,
      DataContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataContainer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataContainer, _is_default_instance_));
  DiscreteDataContainer_descriptor_ = file->message_type(6);
  static const int DiscreteDataContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscreteDataContainer, data_),
  };
  DiscreteDataContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DiscreteDataContainer_descriptor_,
      DiscreteDataContainer::default_instance_,
      DiscreteDataContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(DiscreteDataContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscreteDataContainer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscreteDataContainer, _is_default_instance_));
  BoxDataContainer_descriptor_ = file->message_type(7);
  static const int BoxDataContainer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, intdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, uintdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, floatdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, doubledata_),
  };
  BoxDataContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoxDataContainer_descriptor_,
      BoxDataContainer::default_instance_,
      BoxDataContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoxDataContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDataContainer, _is_default_instance_));
  TupleDataContainer_descriptor_ = file->message_type(8);
  static const int TupleDataContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleDataContainer, element_),
  };
  TupleDataContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TupleDataContainer_descriptor_,
      TupleDataContainer::default_instance_,
      TupleDataContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(TupleDataContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleDataContainer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleDataContainer, _is_default_instance_));
  DictDataContainer_descriptor_ = file->message_type(9);
  static const int DictDataContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictDataContainer, element_),
  };
  DictDataContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DictDataContainer_descriptor_,
      DictDataContainer::default_instance_,
      DictDataContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(DictDataContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictDataContainer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictDataContainer, _is_default_instance_));
  SimInitMsg_descriptor_ = file->message_type(10);
  static const int SimInitMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitMsg, simprocessid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitMsg, wafshellprocessid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitMsg, obsspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitMsg, actspace_),
  };
  SimInitMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimInitMsg_descriptor_,
      SimInitMsg::default_instance_,
      SimInitMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimInitMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitMsg, _is_default_instance_));
  SimInitAck_descriptor_ = file->message_type(11);
  static const int SimInitAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitAck, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitAck, stopsimreq_),
  };
  SimInitAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimInitAck_descriptor_,
      SimInitAck::default_instance_,
      SimInitAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimInitAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInitAck, _is_default_instance_));
  EnvStateMsg_descriptor_ = file->message_type(12);
  static const int EnvStateMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, obsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, isgameover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, info_),
  };
  EnvStateMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnvStateMsg_descriptor_,
      EnvStateMsg::default_instance_,
      EnvStateMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnvStateMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvStateMsg, _is_default_instance_));
  EnvStateMsg_Reason_descriptor_ = EnvStateMsg_descriptor_->enum_type(0);
  EnvActMsg_descriptor_ = file->message_type(13);
  static const int EnvActMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvActMsg, actdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvActMsg, stopsimreq_),
  };
  EnvActMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnvActMsg_descriptor_,
      EnvActMsg::default_instance_,
      EnvActMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnvActMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvActMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvActMsg, _is_default_instance_));
  MsgType_descriptor_ = file->enum_type(0);
  SpaceType_descriptor_ = file->enum_type(1);
  Dtype_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpaceDescription_descriptor_, &SpaceDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DiscreteSpace_descriptor_, &DiscreteSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoxSpace_descriptor_, &BoxSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TupleSpace_descriptor_, &TupleSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DictSpace_descriptor_, &DictSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataContainer_descriptor_, &DataContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DiscreteDataContainer_descriptor_, &DiscreteDataContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoxDataContainer_descriptor_, &BoxDataContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TupleDataContainer_descriptor_, &TupleDataContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DictDataContainer_descriptor_, &DictDataContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimInitMsg_descriptor_, &SimInitMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimInitAck_descriptor_, &SimInitAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnvStateMsg_descriptor_, &EnvStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnvActMsg_descriptor_, &EnvActMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete SpaceDescription::default_instance_;
  delete SpaceDescription_reflection_;
  delete DiscreteSpace::default_instance_;
  delete DiscreteSpace_reflection_;
  delete BoxSpace::default_instance_;
  delete BoxSpace_reflection_;
  delete TupleSpace::default_instance_;
  delete TupleSpace_reflection_;
  delete DictSpace::default_instance_;
  delete DictSpace_reflection_;
  delete DataContainer::default_instance_;
  delete DataContainer_reflection_;
  delete DiscreteDataContainer::default_instance_;
  delete DiscreteDataContainer_reflection_;
  delete BoxDataContainer::default_instance_;
  delete BoxDataContainer_reflection_;
  delete TupleDataContainer::default_instance_;
  delete TupleDataContainer_reflection_;
  delete DictDataContainer::default_instance_;
  delete DictDataContainer_reflection_;
  delete SimInitMsg::default_instance_;
  delete SimInitMsg_reflection_;
  delete SimInitAck::default_instance_;
  delete SimInitAck_reflection_;
  delete EnvStateMsg::default_instance_;
  delete EnvStateMsg_reflection_;
  delete EnvActMsg::default_instance_;
  delete EnvActMsg_reflection_;
}

void protobuf_AddDesc_messages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\nns3opengym\032\031google/pro"
    "tobuf/any.proto\"j\n\020SpaceDescription\022#\n\004t"
    "ype\030\001 \001(\0162\025.ns3opengym.SpaceType\022#\n\005spac"
    "e\030\002 \001(\0132\024.google.protobuf.Any\022\014\n\004name\030\003 "
    "\001(\t\"\032\n\rDiscreteSpace\022\t\n\001n\030\001 \001(\005\"V\n\010BoxSp"
    "ace\022\013\n\003low\030\001 \001(\002\022\014\n\004high\030\002 \001(\002\022 \n\005dtype\030"
    "\003 \001(\0162\021.ns3opengym.Dtype\022\r\n\005shape\030\004 \003(\r\""
    ";\n\nTupleSpace\022-\n\007element\030\001 \003(\0132\034.ns3open"
    "gym.SpaceDescription\":\n\tDictSpace\022-\n\007ele"
    "ment\030\001 \003(\0132\034.ns3opengym.SpaceDescription"
    "\"f\n\rDataContainer\022#\n\004type\030\001 \001(\0162\025.ns3ope"
    "ngym.SpaceType\022\"\n\004data\030\002 \001(\0132\024.google.pr"
    "otobuf.Any\022\014\n\004name\030\003 \001(\t\"%\n\025DiscreteData"
    "Container\022\014\n\004data\030\001 \001(\005\"\215\001\n\020BoxDataConta"
    "iner\022 \n\005dtype\030\001 \001(\0162\021.ns3opengym.Dtype\022\r"
    "\n\005shape\030\002 \003(\r\022\017\n\007intData\030\003 \003(\005\022\020\n\010uintDa"
    "ta\030\004 \003(\r\022\021\n\tfloatData\030\005 \003(\002\022\022\n\ndoubleDat"
    "a\030\006 \003(\001\"@\n\022TupleDataContainer\022*\n\007element"
    "\030\001 \003(\0132\031.ns3opengym.DataContainer\"\?\n\021Dic"
    "tDataContainer\022*\n\007element\030\001 \003(\0132\031.ns3ope"
    "ngym.DataContainer\"\235\001\n\nSimInitMsg\022\024\n\014sim"
    "ProcessId\030\001 \001(\004\022\031\n\021wafShellProcessId\030\002 \001"
    "(\004\022.\n\010obsSpace\030\003 \001(\0132\034.ns3opengym.SpaceD"
    "escription\022.\n\010actSpace\030\004 \001(\0132\034.ns3opengy"
    "m.SpaceDescription\".\n\nSimInitAck\022\014\n\004done"
    "\030\001 \001(\010\022\022\n\nstopSimReq\030\002 \001(\010\"\306\001\n\013EnvStateM"
    "sg\022*\n\007obsData\030\001 \001(\0132\031.ns3opengym.DataCon"
    "tainer\022\016\n\006reward\030\002 \001(\002\022\022\n\nisGameOver\030\003 \001"
    "(\010\022.\n\006reason\030\004 \001(\0162\036.ns3opengym.EnvState"
    "Msg.Reason\022\014\n\004info\030\005 \001(\t\")\n\006Reason\022\021\n\rSi"
    "mulationEnd\020\000\022\014\n\010GameOver\020\001\"K\n\tEnvActMsg"
    "\022*\n\007actData\030\001 \001(\0132\031.ns3opengym.DataConta"
    "iner\022\022\n\nstopSimReq\030\002 \001(\010*\234\001\n\007MsgType\022\013\n\007"
    "Unknown\020\000\022\010\n\004Init\020\001\022\017\n\013ActionSpace\020\002\022\024\n\020"
    "ObservationSpace\020\003\022\016\n\nIsGameOver\020\004\022\017\n\013Ob"
    "servation\020\005\022\n\n\006Reward\020\006\022\r\n\tExtraInfo\020\007\022\n"
    "\n\006Action\020\010\022\013\n\007StopEnv\020\t*H\n\tSpaceType\022\017\n\013"
    "NoSpaceType\020\000\022\014\n\010Discrete\020\001\022\007\n\003Box\020\002\022\t\n\005"
    "Tuple\020\003\022\010\n\004Dict\020\004*>\n\005Dtype\022\013\n\007NoDType\020\000\022"
    "\007\n\003INT\020\001\022\010\n\004UINT\020\002\022\t\n\005FLOAT\020\003\022\n\n\006DOUBLE\020"
    "\004b\006proto3", 1609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  SpaceDescription::default_instance_ = new SpaceDescription();
  DiscreteSpace::default_instance_ = new DiscreteSpace();
  BoxSpace::default_instance_ = new BoxSpace();
  TupleSpace::default_instance_ = new TupleSpace();
  DictSpace::default_instance_ = new DictSpace();
  DataContainer::default_instance_ = new DataContainer();
  DiscreteDataContainer::default_instance_ = new DiscreteDataContainer();
  BoxDataContainer::default_instance_ = new BoxDataContainer();
  TupleDataContainer::default_instance_ = new TupleDataContainer();
  DictDataContainer::default_instance_ = new DictDataContainer();
  SimInitMsg::default_instance_ = new SimInitMsg();
  SimInitAck::default_instance_ = new SimInitAck();
  EnvStateMsg::default_instance_ = new EnvStateMsg();
  EnvActMsg::default_instance_ = new EnvActMsg();
  SpaceDescription::default_instance_->InitAsDefaultInstance();
  DiscreteSpace::default_instance_->InitAsDefaultInstance();
  BoxSpace::default_instance_->InitAsDefaultInstance();
  TupleSpace::default_instance_->InitAsDefaultInstance();
  DictSpace::default_instance_->InitAsDefaultInstance();
  DataContainer::default_instance_->InitAsDefaultInstance();
  DiscreteDataContainer::default_instance_->InitAsDefaultInstance();
  BoxDataContainer::default_instance_->InitAsDefaultInstance();
  TupleDataContainer::default_instance_->InitAsDefaultInstance();
  DictDataContainer::default_instance_->InitAsDefaultInstance();
  SimInitMsg::default_instance_->InitAsDefaultInstance();
  SimInitAck::default_instance_->InitAsDefaultInstance();
  EnvStateMsg::default_instance_->InitAsDefaultInstance();
  EnvActMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpaceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpaceType_descriptor_;
}
bool SpaceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Dtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dtype_descriptor_;
}
bool Dtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpaceDescription::kTypeFieldNumber;
const int SpaceDescription::kSpaceFieldNumber;
const int SpaceDescription::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpaceDescription::SpaceDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.SpaceDescription)
}

void SpaceDescription::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  space_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

SpaceDescription::SpaceDescription(const SpaceDescription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.SpaceDescription)
}

void SpaceDescription::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  space_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpaceDescription::~SpaceDescription() {
  // @@protoc_insertion_point(destructor:ns3opengym.SpaceDescription)
  SharedDtor();
}

void SpaceDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete space_;
  }
}

void SpaceDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpaceDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpaceDescription_descriptor_;
}

const SpaceDescription& SpaceDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SpaceDescription* SpaceDescription::default_instance_ = NULL;

SpaceDescription* SpaceDescription::New(::google::protobuf::Arena* arena) const {
  SpaceDescription* n = new SpaceDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpaceDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.SpaceDescription)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && space_ != NULL) delete space_;
  space_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SpaceDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.SpaceDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ns3opengym.SpaceType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ns3opengym::SpaceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_space;
        break;
      }

      // optional .google.protobuf.Any space = 2;
      case 2: {
        if (tag == 18) {
         parse_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_space()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ns3opengym.SpaceDescription.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.SpaceDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.SpaceDescription)
  return false;
#undef DO_
}

void SpaceDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.SpaceDescription)
  // optional .ns3opengym.SpaceType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .google.protobuf.Any space = 2;
  if (this->has_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->space_, output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.SpaceDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.SpaceDescription)
}

::google::protobuf::uint8* SpaceDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.SpaceDescription)
  // optional .ns3opengym.SpaceType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .google.protobuf.Any space = 2;
  if (this->has_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->space_, false, target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.SpaceDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.SpaceDescription)
  return target;
}

int SpaceDescription::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.SpaceDescription)
  int total_size = 0;

  // optional .ns3opengym.SpaceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .google.protobuf.Any space = 2;
  if (this->has_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->space_);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpaceDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.SpaceDescription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpaceDescription* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpaceDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.SpaceDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.SpaceDescription)
    MergeFrom(*source);
  }
}

void SpaceDescription::MergeFrom(const SpaceDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.SpaceDescription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_space()) {
    mutable_space()->::google::protobuf::Any::MergeFrom(from.space());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SpaceDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.SpaceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpaceDescription::CopyFrom(const SpaceDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.SpaceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpaceDescription::IsInitialized() const {

  return true;
}

void SpaceDescription::Swap(SpaceDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpaceDescription::InternalSwap(SpaceDescription* other) {
  std::swap(type_, other->type_);
  std::swap(space_, other->space_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpaceDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpaceDescription_descriptor_;
  metadata.reflection = SpaceDescription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpaceDescription

// optional .ns3opengym.SpaceType type = 1;
void SpaceDescription::clear_type() {
  type_ = 0;
}
 ::ns3opengym::SpaceType SpaceDescription::type() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.type)
  return static_cast< ::ns3opengym::SpaceType >(type_);
}
 void SpaceDescription::set_type(::ns3opengym::SpaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SpaceDescription.type)
}

// optional .google.protobuf.Any space = 2;
bool SpaceDescription::has_space() const {
  return !_is_default_instance_ && space_ != NULL;
}
void SpaceDescription::clear_space() {
  if (GetArenaNoVirtual() == NULL && space_ != NULL) delete space_;
  space_ = NULL;
}
const ::google::protobuf::Any& SpaceDescription::space() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.space)
  return space_ != NULL ? *space_ : *default_instance_->space_;
}
::google::protobuf::Any* SpaceDescription::mutable_space() {
  
  if (space_ == NULL) {
    space_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.SpaceDescription.space)
  return space_;
}
::google::protobuf::Any* SpaceDescription::release_space() {
  // @@protoc_insertion_point(field_release:ns3opengym.SpaceDescription.space)
  
  ::google::protobuf::Any* temp = space_;
  space_ = NULL;
  return temp;
}
void SpaceDescription::set_allocated_space(::google::protobuf::Any* space) {
  delete space_;
  space_ = space;
  if (space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SpaceDescription.space)
}

// optional string name = 3;
void SpaceDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SpaceDescription::name() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpaceDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns3opengym.SpaceDescription.name)
}
 void SpaceDescription::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.SpaceDescription.name)
}
 void SpaceDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.SpaceDescription.name)
}
 ::std::string* SpaceDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ns3opengym.SpaceDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpaceDescription::release_name() {
  // @@protoc_insertion_point(field_release:ns3opengym.SpaceDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpaceDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SpaceDescription.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscreteSpace::kNFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscreteSpace::DiscreteSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.DiscreteSpace)
}

void DiscreteSpace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DiscreteSpace::DiscreteSpace(const DiscreteSpace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DiscreteSpace)
}

void DiscreteSpace::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  n_ = 0;
}

DiscreteSpace::~DiscreteSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.DiscreteSpace)
  SharedDtor();
}

void DiscreteSpace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscreteSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscreteSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscreteSpace_descriptor_;
}

const DiscreteSpace& DiscreteSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DiscreteSpace* DiscreteSpace::default_instance_ = NULL;

DiscreteSpace* DiscreteSpace::New(::google::protobuf::Arena* arena) const {
  DiscreteSpace* n = new DiscreteSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiscreteSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DiscreteSpace)
  n_ = 0;
}

bool DiscreteSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.DiscreteSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 n = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.DiscreteSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.DiscreteSpace)
  return false;
#undef DO_
}

void DiscreteSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.DiscreteSpace)
  // optional int32 n = 1;
  if (this->n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.DiscreteSpace)
}

::google::protobuf::uint8* DiscreteSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DiscreteSpace)
  // optional int32 n = 1;
  if (this->n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->n(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DiscreteSpace)
  return target;
}

int DiscreteSpace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DiscreteSpace)
  int total_size = 0;

  // optional int32 n = 1;
  if (this->n() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->n());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscreteSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.DiscreteSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DiscreteSpace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscreteSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.DiscreteSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.DiscreteSpace)
    MergeFrom(*source);
  }
}

void DiscreteSpace::MergeFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DiscreteSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.n() != 0) {
    set_n(from.n());
  }
}

void DiscreteSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.DiscreteSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteSpace::CopyFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DiscreteSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteSpace::IsInitialized() const {

  return true;
}

void DiscreteSpace::Swap(DiscreteSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiscreteSpace::InternalSwap(DiscreteSpace* other) {
  std::swap(n_, other->n_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscreteSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscreteSpace_descriptor_;
  metadata.reflection = DiscreteSpace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiscreteSpace

// optional int32 n = 1;
void DiscreteSpace::clear_n() {
  n_ = 0;
}
 ::google::protobuf::int32 DiscreteSpace::n() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DiscreteSpace.n)
  return n_;
}
 void DiscreteSpace::set_n(::google::protobuf::int32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.DiscreteSpace.n)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxSpace::kLowFieldNumber;
const int BoxSpace::kHighFieldNumber;
const int BoxSpace::kDtypeFieldNumber;
const int BoxSpace::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxSpace::BoxSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.BoxSpace)
}

void BoxSpace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoxSpace::BoxSpace(const BoxSpace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.BoxSpace)
}

void BoxSpace::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  low_ = 0;
  high_ = 0;
  dtype_ = 0;
}

BoxSpace::~BoxSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.BoxSpace)
  SharedDtor();
}

void BoxSpace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxSpace_descriptor_;
}

const BoxSpace& BoxSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

BoxSpace* BoxSpace::default_instance_ = NULL;

BoxSpace* BoxSpace::New(::google::protobuf::Arena* arena) const {
  BoxSpace* n = new BoxSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.BoxSpace)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoxSpace, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoxSpace*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(low_, high_);
  dtype_ = 0;

#undef ZR_HELPER_
#undef ZR_

  shape_.Clear();
}

bool BoxSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.BoxSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float low = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_high;
        break;
      }

      // optional float high = 2;
      case 2: {
        if (tag == 21) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dtype;
        break;
      }

      // optional .ns3opengym.Dtype dtype = 3;
      case 3: {
        if (tag == 24) {
         parse_dtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::ns3opengym::Dtype >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shape;
        break;
      }

      // repeated uint32 shape = 4;
      case 4: {
        if (tag == 34) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.BoxSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.BoxSpace)
  return false;
#undef DO_
}

void BoxSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.BoxSpace)
  // optional float low = 1;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->low(), output);
  }

  // optional float high = 2;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->high(), output);
  }

  // optional .ns3opengym.Dtype dtype = 3;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  // repeated uint32 shape = 4;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->shape(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.BoxSpace)
}

::google::protobuf::uint8* BoxSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.BoxSpace)
  // optional float low = 1;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->low(), target);
  }

  // optional float high = 2;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->high(), target);
  }

  // optional .ns3opengym.Dtype dtype = 3;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  // repeated uint32 shape = 4;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->shape(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.BoxSpace)
  return target;
}

int BoxSpace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.BoxSpace)
  int total_size = 0;

  // optional float low = 1;
  if (this->low() != 0) {
    total_size += 1 + 4;
  }

  // optional float high = 2;
  if (this->high() != 0) {
    total_size += 1 + 4;
  }

  // optional .ns3opengym.Dtype dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated uint32 shape = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.BoxSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoxSpace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.BoxSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.BoxSpace)
    MergeFrom(*source);
  }
}

void BoxSpace::MergeFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.BoxSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void BoxSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.BoxSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxSpace::CopyFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.BoxSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxSpace::IsInitialized() const {

  return true;
}

void BoxSpace::Swap(BoxSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxSpace::InternalSwap(BoxSpace* other) {
  std::swap(low_, other->low_);
  std::swap(high_, other->high_);
  std::swap(dtype_, other->dtype_);
  shape_.UnsafeArenaSwap(&other->shape_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxSpace_descriptor_;
  metadata.reflection = BoxSpace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxSpace

// optional float low = 1;
void BoxSpace::clear_low() {
  low_ = 0;
}
 float BoxSpace::low() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.low)
  return low_;
}
 void BoxSpace::set_low(float value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.low)
}

// optional float high = 2;
void BoxSpace::clear_high() {
  high_ = 0;
}
 float BoxSpace::high() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.high)
  return high_;
}
 void BoxSpace::set_high(float value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.high)
}

// optional .ns3opengym.Dtype dtype = 3;
void BoxSpace::clear_dtype() {
  dtype_ = 0;
}
 ::ns3opengym::Dtype BoxSpace::dtype() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.dtype)
  return static_cast< ::ns3opengym::Dtype >(dtype_);
}
 void BoxSpace::set_dtype(::ns3opengym::Dtype value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.dtype)
}

// repeated uint32 shape = 4;
int BoxSpace::shape_size() const {
  return shape_.size();
}
void BoxSpace::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::uint32 BoxSpace::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.shape)
  return shape_.Get(index);
}
 void BoxSpace::set_shape(int index, ::google::protobuf::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.shape)
}
 void BoxSpace::add_shape(::google::protobuf::uint32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxSpace.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoxSpace::shape() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxSpace.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoxSpace::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxSpace.shape)
  return &shape_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TupleSpace::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TupleSpace::TupleSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.TupleSpace)
}

void TupleSpace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TupleSpace::TupleSpace(const TupleSpace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.TupleSpace)
}

void TupleSpace::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TupleSpace::~TupleSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.TupleSpace)
  SharedDtor();
}

void TupleSpace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TupleSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TupleSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TupleSpace_descriptor_;
}

const TupleSpace& TupleSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TupleSpace* TupleSpace::default_instance_ = NULL;

TupleSpace* TupleSpace::New(::google::protobuf::Arena* arena) const {
  TupleSpace* n = new TupleSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TupleSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.TupleSpace)
  element_.Clear();
}

bool TupleSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.TupleSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ns3opengym.SpaceDescription element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.TupleSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.TupleSpace)
  return false;
#undef DO_
}

void TupleSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.TupleSpace)
  // repeated .ns3opengym.SpaceDescription element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.TupleSpace)
}

::google::protobuf::uint8* TupleSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.TupleSpace)
  // repeated .ns3opengym.SpaceDescription element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.TupleSpace)
  return target;
}

int TupleSpace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.TupleSpace)
  int total_size = 0;

  // repeated .ns3opengym.SpaceDescription element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TupleSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.TupleSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TupleSpace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TupleSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.TupleSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.TupleSpace)
    MergeFrom(*source);
  }
}

void TupleSpace::MergeFrom(const TupleSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.TupleSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
}

void TupleSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.TupleSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleSpace::CopyFrom(const TupleSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.TupleSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleSpace::IsInitialized() const {

  return true;
}

void TupleSpace::Swap(TupleSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TupleSpace::InternalSwap(TupleSpace* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TupleSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TupleSpace_descriptor_;
  metadata.reflection = TupleSpace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TupleSpace

// repeated .ns3opengym.SpaceDescription element = 1;
int TupleSpace::element_size() const {
  return element_.size();
}
void TupleSpace::clear_element() {
  element_.Clear();
}
const ::ns3opengym::SpaceDescription& TupleSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.TupleSpace.element)
  return element_.Get(index);
}
::ns3opengym::SpaceDescription* TupleSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.TupleSpace.element)
  return element_.Mutable(index);
}
::ns3opengym::SpaceDescription* TupleSpace::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.TupleSpace.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
TupleSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.TupleSpace.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
TupleSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.TupleSpace.element)
  return element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictSpace::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictSpace::DictSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.DictSpace)
}

void DictSpace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DictSpace::DictSpace(const DictSpace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DictSpace)
}

void DictSpace::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DictSpace::~DictSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.DictSpace)
  SharedDtor();
}

void DictSpace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DictSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictSpace_descriptor_;
}

const DictSpace& DictSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DictSpace* DictSpace::default_instance_ = NULL;

DictSpace* DictSpace::New(::google::protobuf::Arena* arena) const {
  DictSpace* n = new DictSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DictSpace)
  element_.Clear();
}

bool DictSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.DictSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ns3opengym.SpaceDescription element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.DictSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.DictSpace)
  return false;
#undef DO_
}

void DictSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.DictSpace)
  // repeated .ns3opengym.SpaceDescription element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.DictSpace)
}

::google::protobuf::uint8* DictSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DictSpace)
  // repeated .ns3opengym.SpaceDescription element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DictSpace)
  return target;
}

int DictSpace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DictSpace)
  int total_size = 0;

  // repeated .ns3opengym.SpaceDescription element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.DictSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DictSpace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DictSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.DictSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.DictSpace)
    MergeFrom(*source);
  }
}

void DictSpace::MergeFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DictSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
}

void DictSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.DictSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictSpace::CopyFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DictSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictSpace::IsInitialized() const {

  return true;
}

void DictSpace::Swap(DictSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictSpace::InternalSwap(DictSpace* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DictSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictSpace_descriptor_;
  metadata.reflection = DictSpace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictSpace

// repeated .ns3opengym.SpaceDescription element = 1;
int DictSpace::element_size() const {
  return element_.size();
}
void DictSpace::clear_element() {
  element_.Clear();
}
const ::ns3opengym::SpaceDescription& DictSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.DictSpace.element)
  return element_.Get(index);
}
::ns3opengym::SpaceDescription* DictSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DictSpace.element)
  return element_.Mutable(index);
}
::ns3opengym::SpaceDescription* DictSpace::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.DictSpace.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
DictSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.DictSpace.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
DictSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.DictSpace.element)
  return element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataContainer::kTypeFieldNumber;
const int DataContainer::kDataFieldNumber;
const int DataContainer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataContainer::DataContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.DataContainer)
}

void DataContainer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

DataContainer::DataContainer(const DataContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DataContainer)
}

void DataContainer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  data_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataContainer::~DataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.DataContainer)
  SharedDtor();
}

void DataContainer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_;
  }
}

void DataContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataContainer_descriptor_;
}

const DataContainer& DataContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DataContainer* DataContainer::default_instance_ = NULL;

DataContainer* DataContainer::New(::google::protobuf::Arena* arena) const {
  DataContainer* n = new DataContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DataContainer)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.DataContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ns3opengym.SpaceType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ns3opengym::SpaceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .google.protobuf.Any data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ns3opengym.DataContainer.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.DataContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.DataContainer)
  return false;
#undef DO_
}

void DataContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.DataContainer)
  // optional .ns3opengym.SpaceType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .google.protobuf.Any data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.DataContainer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.DataContainer)
}

::google::protobuf::uint8* DataContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DataContainer)
  // optional .ns3opengym.SpaceType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.DataContainer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DataContainer)
  return target;
}

int DataContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DataContainer)
  int total_size = 0;

  // optional .ns3opengym.SpaceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.DataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.DataContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.DataContainer)
    MergeFrom(*source);
  }
}

void DataContainer::MergeFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DataContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.DataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataContainer::CopyFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataContainer::IsInitialized() const {

  return true;
}

void DataContainer::Swap(DataContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataContainer::InternalSwap(DataContainer* other) {
  std::swap(type_, other->type_);
  std::swap(data_, other->data_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataContainer_descriptor_;
  metadata.reflection = DataContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataContainer

// optional .ns3opengym.SpaceType type = 1;
void DataContainer::clear_type() {
  type_ = 0;
}
 ::ns3opengym::SpaceType DataContainer::type() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.type)
  return static_cast< ::ns3opengym::SpaceType >(type_);
}
 void DataContainer::set_type(::ns3opengym::SpaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.DataContainer.type)
}

// optional .google.protobuf.Any data = 2;
bool DataContainer::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void DataContainer::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::google::protobuf::Any& DataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::google::protobuf::Any* DataContainer::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.DataContainer.data)
  return data_;
}
::google::protobuf::Any* DataContainer::release_data() {
  // @@protoc_insertion_point(field_release:ns3opengym.DataContainer.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
void DataContainer::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.DataContainer.data)
}

// optional string name = 3;
void DataContainer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataContainer::name() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataContainer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns3opengym.DataContainer.name)
}
 void DataContainer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.DataContainer.name)
}
 void DataContainer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.DataContainer.name)
}
 ::std::string* DataContainer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ns3opengym.DataContainer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataContainer::release_name() {
  // @@protoc_insertion_point(field_release:ns3opengym.DataContainer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataContainer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.DataContainer.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscreteDataContainer::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscreteDataContainer::DiscreteDataContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.DiscreteDataContainer)
}

void DiscreteDataContainer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DiscreteDataContainer::DiscreteDataContainer(const DiscreteDataContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DiscreteDataContainer)
}

void DiscreteDataContainer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  data_ = 0;
}

DiscreteDataContainer::~DiscreteDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.DiscreteDataContainer)
  SharedDtor();
}

void DiscreteDataContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscreteDataContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscreteDataContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscreteDataContainer_descriptor_;
}

const DiscreteDataContainer& DiscreteDataContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DiscreteDataContainer* DiscreteDataContainer::default_instance_ = NULL;

DiscreteDataContainer* DiscreteDataContainer::New(::google::protobuf::Arena* arena) const {
  DiscreteDataContainer* n = new DiscreteDataContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiscreteDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DiscreteDataContainer)
  data_ = 0;
}

bool DiscreteDataContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.DiscreteDataContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.DiscreteDataContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.DiscreteDataContainer)
  return false;
#undef DO_
}

void DiscreteDataContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.DiscreteDataContainer)
  // optional int32 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.DiscreteDataContainer)
}

::google::protobuf::uint8* DiscreteDataContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DiscreteDataContainer)
  // optional int32 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DiscreteDataContainer)
  return target;
}

int DiscreteDataContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DiscreteDataContainer)
  int total_size = 0;

  // optional int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscreteDataContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.DiscreteDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DiscreteDataContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscreteDataContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.DiscreteDataContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.DiscreteDataContainer)
    MergeFrom(*source);
  }
}

void DiscreteDataContainer::MergeFrom(const DiscreteDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DiscreteDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
}

void DiscreteDataContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.DiscreteDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteDataContainer::CopyFrom(const DiscreteDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DiscreteDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteDataContainer::IsInitialized() const {

  return true;
}

void DiscreteDataContainer::Swap(DiscreteDataContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiscreteDataContainer::InternalSwap(DiscreteDataContainer* other) {
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscreteDataContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscreteDataContainer_descriptor_;
  metadata.reflection = DiscreteDataContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiscreteDataContainer

// optional int32 data = 1;
void DiscreteDataContainer::clear_data() {
  data_ = 0;
}
 ::google::protobuf::int32 DiscreteDataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DiscreteDataContainer.data)
  return data_;
}
 void DiscreteDataContainer::set_data(::google::protobuf::int32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.DiscreteDataContainer.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxDataContainer::kDtypeFieldNumber;
const int BoxDataContainer::kShapeFieldNumber;
const int BoxDataContainer::kIntDataFieldNumber;
const int BoxDataContainer::kUintDataFieldNumber;
const int BoxDataContainer::kFloatDataFieldNumber;
const int BoxDataContainer::kDoubleDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxDataContainer::BoxDataContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.BoxDataContainer)
}

void BoxDataContainer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoxDataContainer::BoxDataContainer(const BoxDataContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.BoxDataContainer)
}

void BoxDataContainer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dtype_ = 0;
}

BoxDataContainer::~BoxDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.BoxDataContainer)
  SharedDtor();
}

void BoxDataContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxDataContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxDataContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxDataContainer_descriptor_;
}

const BoxDataContainer& BoxDataContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

BoxDataContainer* BoxDataContainer::default_instance_ = NULL;

BoxDataContainer* BoxDataContainer::New(::google::protobuf::Arena* arena) const {
  BoxDataContainer* n = new BoxDataContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.BoxDataContainer)
  dtype_ = 0;
  shape_.Clear();
  intdata_.Clear();
  uintdata_.Clear();
  floatdata_.Clear();
  doubledata_.Clear();
}

bool BoxDataContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.BoxDataContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ns3opengym.Dtype dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::ns3opengym::Dtype >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // repeated uint32 shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_intData;
        break;
      }

      // repeated int32 intData = 3;
      case 3: {
        if (tag == 26) {
         parse_intData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_intdata())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_intdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uintData;
        break;
      }

      // repeated uint32 uintData = 4;
      case 4: {
        if (tag == 34) {
         parse_uintData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uintdata())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_uintdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_floatData;
        break;
      }

      // repeated float floatData = 5;
      case 5: {
        if (tag == 42) {
         parse_floatData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floatdata())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_floatdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_doubleData;
        break;
      }

      // repeated double doubleData = 6;
      case 6: {
        if (tag == 50) {
         parse_doubleData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_doubledata())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_doubledata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.BoxDataContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.BoxDataContainer)
  return false;
#undef DO_
}

void BoxDataContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.BoxDataContainer)
  // optional .ns3opengym.Dtype dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // repeated uint32 shape = 2;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->shape(i), output);
  }

  // repeated int32 intData = 3;
  if (this->intdata_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_intdata_cached_byte_size_);
  }
  for (int i = 0; i < this->intdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->intdata(i), output);
  }

  // repeated uint32 uintData = 4;
  if (this->uintdata_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uintdata_cached_byte_size_);
  }
  for (int i = 0; i < this->uintdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uintdata(i), output);
  }

  // repeated float floatData = 5;
  if (this->floatdata_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_floatdata_cached_byte_size_);
  }
  for (int i = 0; i < this->floatdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->floatdata(i), output);
  }

  // repeated double doubleData = 6;
  if (this->doubledata_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_doubledata_cached_byte_size_);
  }
  for (int i = 0; i < this->doubledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->doubledata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.BoxDataContainer)
}

::google::protobuf::uint8* BoxDataContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.BoxDataContainer)
  // optional .ns3opengym.Dtype dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // repeated uint32 shape = 2;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->shape(i), target);
  }

  // repeated int32 intData = 3;
  if (this->intdata_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _intdata_cached_byte_size_, target);
  }
  for (int i = 0; i < this->intdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->intdata(i), target);
  }

  // repeated uint32 uintData = 4;
  if (this->uintdata_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _uintdata_cached_byte_size_, target);
  }
  for (int i = 0; i < this->uintdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uintdata(i), target);
  }

  // repeated float floatData = 5;
  if (this->floatdata_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _floatdata_cached_byte_size_, target);
  }
  for (int i = 0; i < this->floatdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->floatdata(i), target);
  }

  // repeated double doubleData = 6;
  if (this->doubledata_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _doubledata_cached_byte_size_, target);
  }
  for (int i = 0; i < this->doubledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->doubledata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.BoxDataContainer)
  return target;
}

int BoxDataContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.BoxDataContainer)
  int total_size = 0;

  // optional .ns3opengym.Dtype dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated uint32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 intData = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->intdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->intdata(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intdata_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 uintData = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->uintdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uintdata(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uintdata_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float floatData = 5;
  {
    int data_size = 0;
    data_size = 4 * this->floatdata_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _floatdata_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double doubleData = 6;
  {
    int data_size = 0;
    data_size = 8 * this->doubledata_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _doubledata_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxDataContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.BoxDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoxDataContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxDataContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.BoxDataContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.BoxDataContainer)
    MergeFrom(*source);
  }
}

void BoxDataContainer::MergeFrom(const BoxDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.BoxDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  intdata_.MergeFrom(from.intdata_);
  uintdata_.MergeFrom(from.uintdata_);
  floatdata_.MergeFrom(from.floatdata_);
  doubledata_.MergeFrom(from.doubledata_);
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void BoxDataContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.BoxDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDataContainer::CopyFrom(const BoxDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.BoxDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDataContainer::IsInitialized() const {

  return true;
}

void BoxDataContainer::Swap(BoxDataContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxDataContainer::InternalSwap(BoxDataContainer* other) {
  std::swap(dtype_, other->dtype_);
  shape_.UnsafeArenaSwap(&other->shape_);
  intdata_.UnsafeArenaSwap(&other->intdata_);
  uintdata_.UnsafeArenaSwap(&other->uintdata_);
  floatdata_.UnsafeArenaSwap(&other->floatdata_);
  doubledata_.UnsafeArenaSwap(&other->doubledata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxDataContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxDataContainer_descriptor_;
  metadata.reflection = BoxDataContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxDataContainer

// optional .ns3opengym.Dtype dtype = 1;
void BoxDataContainer::clear_dtype() {
  dtype_ = 0;
}
 ::ns3opengym::Dtype BoxDataContainer::dtype() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.dtype)
  return static_cast< ::ns3opengym::Dtype >(dtype_);
}
 void BoxDataContainer::set_dtype(::ns3opengym::Dtype value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.dtype)
}

// repeated uint32 shape = 2;
int BoxDataContainer::shape_size() const {
  return shape_.size();
}
void BoxDataContainer::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::uint32 BoxDataContainer::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.shape)
  return shape_.Get(index);
}
 void BoxDataContainer::set_shape(int index, ::google::protobuf::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.shape)
}
 void BoxDataContainer::add_shape(::google::protobuf::uint32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoxDataContainer::shape() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoxDataContainer::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.shape)
  return &shape_;
}

// repeated int32 intData = 3;
int BoxDataContainer::intdata_size() const {
  return intdata_.size();
}
void BoxDataContainer::clear_intdata() {
  intdata_.Clear();
}
 ::google::protobuf::int32 BoxDataContainer::intdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.intData)
  return intdata_.Get(index);
}
 void BoxDataContainer::set_intdata(int index, ::google::protobuf::int32 value) {
  intdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.intData)
}
 void BoxDataContainer::add_intdata(::google::protobuf::int32 value) {
  intdata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.intData)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BoxDataContainer::intdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.intData)
  return intdata_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BoxDataContainer::mutable_intdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.intData)
  return &intdata_;
}

// repeated uint32 uintData = 4;
int BoxDataContainer::uintdata_size() const {
  return uintdata_.size();
}
void BoxDataContainer::clear_uintdata() {
  uintdata_.Clear();
}
 ::google::protobuf::uint32 BoxDataContainer::uintdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.uintData)
  return uintdata_.Get(index);
}
 void BoxDataContainer::set_uintdata(int index, ::google::protobuf::uint32 value) {
  uintdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.uintData)
}
 void BoxDataContainer::add_uintdata(::google::protobuf::uint32 value) {
  uintdata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.uintData)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoxDataContainer::uintdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.uintData)
  return uintdata_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoxDataContainer::mutable_uintdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.uintData)
  return &uintdata_;
}

// repeated float floatData = 5;
int BoxDataContainer::floatdata_size() const {
  return floatdata_.size();
}
void BoxDataContainer::clear_floatdata() {
  floatdata_.Clear();
}
 float BoxDataContainer::floatdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.floatData)
  return floatdata_.Get(index);
}
 void BoxDataContainer::set_floatdata(int index, float value) {
  floatdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.floatData)
}
 void BoxDataContainer::add_floatdata(float value) {
  floatdata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.floatData)
}
 const ::google::protobuf::RepeatedField< float >&
BoxDataContainer::floatdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.floatData)
  return floatdata_;
}
 ::google::protobuf::RepeatedField< float >*
BoxDataContainer::mutable_floatdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.floatData)
  return &floatdata_;
}

// repeated double doubleData = 6;
int BoxDataContainer::doubledata_size() const {
  return doubledata_.size();
}
void BoxDataContainer::clear_doubledata() {
  doubledata_.Clear();
}
 double BoxDataContainer::doubledata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.doubleData)
  return doubledata_.Get(index);
}
 void BoxDataContainer::set_doubledata(int index, double value) {
  doubledata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.doubleData)
}
 void BoxDataContainer::add_doubledata(double value) {
  doubledata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.doubleData)
}
 const ::google::protobuf::RepeatedField< double >&
BoxDataContainer::doubledata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.doubleData)
  return doubledata_;
}
 ::google::protobuf::RepeatedField< double >*
BoxDataContainer::mutable_doubledata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.doubleData)
  return &doubledata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TupleDataContainer::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TupleDataContainer::TupleDataContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.TupleDataContainer)
}

void TupleDataContainer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TupleDataContainer::TupleDataContainer(const TupleDataContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.TupleDataContainer)
}

void TupleDataContainer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TupleDataContainer::~TupleDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.TupleDataContainer)
  SharedDtor();
}

void TupleDataContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TupleDataContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TupleDataContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TupleDataContainer_descriptor_;
}

const TupleDataContainer& TupleDataContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TupleDataContainer* TupleDataContainer::default_instance_ = NULL;

TupleDataContainer* TupleDataContainer::New(::google::protobuf::Arena* arena) const {
  TupleDataContainer* n = new TupleDataContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TupleDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.TupleDataContainer)
  element_.Clear();
}

bool TupleDataContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.TupleDataContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ns3opengym.DataContainer element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.TupleDataContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.TupleDataContainer)
  return false;
#undef DO_
}

void TupleDataContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.TupleDataContainer)
  // repeated .ns3opengym.DataContainer element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.TupleDataContainer)
}

::google::protobuf::uint8* TupleDataContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.TupleDataContainer)
  // repeated .ns3opengym.DataContainer element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.TupleDataContainer)
  return target;
}

int TupleDataContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.TupleDataContainer)
  int total_size = 0;

  // repeated .ns3opengym.DataContainer element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TupleDataContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.TupleDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TupleDataContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TupleDataContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.TupleDataContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.TupleDataContainer)
    MergeFrom(*source);
  }
}

void TupleDataContainer::MergeFrom(const TupleDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.TupleDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
}

void TupleDataContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.TupleDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleDataContainer::CopyFrom(const TupleDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.TupleDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleDataContainer::IsInitialized() const {

  return true;
}

void TupleDataContainer::Swap(TupleDataContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TupleDataContainer::InternalSwap(TupleDataContainer* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TupleDataContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TupleDataContainer_descriptor_;
  metadata.reflection = TupleDataContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TupleDataContainer

// repeated .ns3opengym.DataContainer element = 1;
int TupleDataContainer::element_size() const {
  return element_.size();
}
void TupleDataContainer::clear_element() {
  element_.Clear();
}
const ::ns3opengym::DataContainer& TupleDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.TupleDataContainer.element)
  return element_.Get(index);
}
::ns3opengym::DataContainer* TupleDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.TupleDataContainer.element)
  return element_.Mutable(index);
}
::ns3opengym::DataContainer* TupleDataContainer::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.TupleDataContainer.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >*
TupleDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.TupleDataContainer.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >&
TupleDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.TupleDataContainer.element)
  return element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictDataContainer::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictDataContainer::DictDataContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.DictDataContainer)
}

void DictDataContainer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DictDataContainer::DictDataContainer(const DictDataContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DictDataContainer)
}

void DictDataContainer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DictDataContainer::~DictDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.DictDataContainer)
  SharedDtor();
}

void DictDataContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DictDataContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictDataContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictDataContainer_descriptor_;
}

const DictDataContainer& DictDataContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

DictDataContainer* DictDataContainer::default_instance_ = NULL;

DictDataContainer* DictDataContainer::New(::google::protobuf::Arena* arena) const {
  DictDataContainer* n = new DictDataContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DictDataContainer)
  element_.Clear();
}

bool DictDataContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.DictDataContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ns3opengym.DataContainer element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.DictDataContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.DictDataContainer)
  return false;
#undef DO_
}

void DictDataContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.DictDataContainer)
  // repeated .ns3opengym.DataContainer element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.DictDataContainer)
}

::google::protobuf::uint8* DictDataContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DictDataContainer)
  // repeated .ns3opengym.DataContainer element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DictDataContainer)
  return target;
}

int DictDataContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DictDataContainer)
  int total_size = 0;

  // repeated .ns3opengym.DataContainer element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictDataContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.DictDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DictDataContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DictDataContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.DictDataContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.DictDataContainer)
    MergeFrom(*source);
  }
}

void DictDataContainer::MergeFrom(const DictDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DictDataContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
}

void DictDataContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.DictDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictDataContainer::CopyFrom(const DictDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DictDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictDataContainer::IsInitialized() const {

  return true;
}

void DictDataContainer::Swap(DictDataContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictDataContainer::InternalSwap(DictDataContainer* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DictDataContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictDataContainer_descriptor_;
  metadata.reflection = DictDataContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictDataContainer

// repeated .ns3opengym.DataContainer element = 1;
int DictDataContainer::element_size() const {
  return element_.size();
}
void DictDataContainer::clear_element() {
  element_.Clear();
}
const ::ns3opengym::DataContainer& DictDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.DictDataContainer.element)
  return element_.Get(index);
}
::ns3opengym::DataContainer* DictDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DictDataContainer.element)
  return element_.Mutable(index);
}
::ns3opengym::DataContainer* DictDataContainer::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.DictDataContainer.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >*
DictDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.DictDataContainer.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >&
DictDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.DictDataContainer.element)
  return element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimInitMsg::kSimProcessIdFieldNumber;
const int SimInitMsg::kWafShellProcessIdFieldNumber;
const int SimInitMsg::kObsSpaceFieldNumber;
const int SimInitMsg::kActSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimInitMsg::SimInitMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.SimInitMsg)
}

void SimInitMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  obsspace_ = const_cast< ::ns3opengym::SpaceDescription*>(&::ns3opengym::SpaceDescription::default_instance());
  actspace_ = const_cast< ::ns3opengym::SpaceDescription*>(&::ns3opengym::SpaceDescription::default_instance());
}

SimInitMsg::SimInitMsg(const SimInitMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.SimInitMsg)
}

void SimInitMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  simprocessid_ = GOOGLE_ULONGLONG(0);
  wafshellprocessid_ = GOOGLE_ULONGLONG(0);
  obsspace_ = NULL;
  actspace_ = NULL;
}

SimInitMsg::~SimInitMsg() {
  // @@protoc_insertion_point(destructor:ns3opengym.SimInitMsg)
  SharedDtor();
}

void SimInitMsg::SharedDtor() {
  if (this != default_instance_) {
    delete obsspace_;
    delete actspace_;
  }
}

void SimInitMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInitMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInitMsg_descriptor_;
}

const SimInitMsg& SimInitMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SimInitMsg* SimInitMsg::default_instance_ = NULL;

SimInitMsg* SimInitMsg::New(::google::protobuf::Arena* arena) const {
  SimInitMsg* n = new SimInitMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimInitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.SimInitMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimInitMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimInitMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(simprocessid_, wafshellprocessid_);
  if (GetArenaNoVirtual() == NULL && obsspace_ != NULL) delete obsspace_;
  obsspace_ = NULL;
  if (GetArenaNoVirtual() == NULL && actspace_ != NULL) delete actspace_;
  actspace_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SimInitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.SimInitMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 simProcessId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &simprocessid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wafShellProcessId;
        break;
      }

      // optional uint64 wafShellProcessId = 2;
      case 2: {
        if (tag == 16) {
         parse_wafShellProcessId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wafshellprocessid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obsSpace;
        break;
      }

      // optional .ns3opengym.SpaceDescription obsSpace = 3;
      case 3: {
        if (tag == 26) {
         parse_obsSpace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsspace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actSpace;
        break;
      }

      // optional .ns3opengym.SpaceDescription actSpace = 4;
      case 4: {
        if (tag == 34) {
         parse_actSpace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actspace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.SimInitMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.SimInitMsg)
  return false;
#undef DO_
}

void SimInitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.SimInitMsg)
  // optional uint64 simProcessId = 1;
  if (this->simprocessid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->simprocessid(), output);
  }

  // optional uint64 wafShellProcessId = 2;
  if (this->wafshellprocessid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wafshellprocessid(), output);
  }

  // optional .ns3opengym.SpaceDescription obsSpace = 3;
  if (this->has_obsspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->obsspace_, output);
  }

  // optional .ns3opengym.SpaceDescription actSpace = 4;
  if (this->has_actspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->actspace_, output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.SimInitMsg)
}

::google::protobuf::uint8* SimInitMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.SimInitMsg)
  // optional uint64 simProcessId = 1;
  if (this->simprocessid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->simprocessid(), target);
  }

  // optional uint64 wafShellProcessId = 2;
  if (this->wafshellprocessid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wafshellprocessid(), target);
  }

  // optional .ns3opengym.SpaceDescription obsSpace = 3;
  if (this->has_obsspace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->obsspace_, false, target);
  }

  // optional .ns3opengym.SpaceDescription actSpace = 4;
  if (this->has_actspace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->actspace_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.SimInitMsg)
  return target;
}

int SimInitMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.SimInitMsg)
  int total_size = 0;

  // optional uint64 simProcessId = 1;
  if (this->simprocessid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->simprocessid());
  }

  // optional uint64 wafShellProcessId = 2;
  if (this->wafshellprocessid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->wafshellprocessid());
  }

  // optional .ns3opengym.SpaceDescription obsSpace = 3;
  if (this->has_obsspace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->obsspace_);
  }

  // optional .ns3opengym.SpaceDescription actSpace = 4;
  if (this->has_actspace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->actspace_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInitMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.SimInitMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimInitMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimInitMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.SimInitMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.SimInitMsg)
    MergeFrom(*source);
  }
}

void SimInitMsg::MergeFrom(const SimInitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.SimInitMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.simprocessid() != 0) {
    set_simprocessid(from.simprocessid());
  }
  if (from.wafshellprocessid() != 0) {
    set_wafshellprocessid(from.wafshellprocessid());
  }
  if (from.has_obsspace()) {
    mutable_obsspace()->::ns3opengym::SpaceDescription::MergeFrom(from.obsspace());
  }
  if (from.has_actspace()) {
    mutable_actspace()->::ns3opengym::SpaceDescription::MergeFrom(from.actspace());
  }
}

void SimInitMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.SimInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInitMsg::CopyFrom(const SimInitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.SimInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInitMsg::IsInitialized() const {

  return true;
}

void SimInitMsg::Swap(SimInitMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimInitMsg::InternalSwap(SimInitMsg* other) {
  std::swap(simprocessid_, other->simprocessid_);
  std::swap(wafshellprocessid_, other->wafshellprocessid_);
  std::swap(obsspace_, other->obsspace_);
  std::swap(actspace_, other->actspace_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimInitMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInitMsg_descriptor_;
  metadata.reflection = SimInitMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimInitMsg

// optional uint64 simProcessId = 1;
void SimInitMsg::clear_simprocessid() {
  simprocessid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SimInitMsg::simprocessid() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.simProcessId)
  return simprocessid_;
}
 void SimInitMsg::set_simprocessid(::google::protobuf::uint64 value) {
  
  simprocessid_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitMsg.simProcessId)
}

// optional uint64 wafShellProcessId = 2;
void SimInitMsg::clear_wafshellprocessid() {
  wafshellprocessid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SimInitMsg::wafshellprocessid() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.wafShellProcessId)
  return wafshellprocessid_;
}
 void SimInitMsg::set_wafshellprocessid(::google::protobuf::uint64 value) {
  
  wafshellprocessid_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitMsg.wafShellProcessId)
}

// optional .ns3opengym.SpaceDescription obsSpace = 3;
bool SimInitMsg::has_obsspace() const {
  return !_is_default_instance_ && obsspace_ != NULL;
}
void SimInitMsg::clear_obsspace() {
  if (GetArenaNoVirtual() == NULL && obsspace_ != NULL) delete obsspace_;
  obsspace_ = NULL;
}
const ::ns3opengym::SpaceDescription& SimInitMsg::obsspace() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.obsSpace)
  return obsspace_ != NULL ? *obsspace_ : *default_instance_->obsspace_;
}
::ns3opengym::SpaceDescription* SimInitMsg::mutable_obsspace() {
  
  if (obsspace_ == NULL) {
    obsspace_ = new ::ns3opengym::SpaceDescription;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.SimInitMsg.obsSpace)
  return obsspace_;
}
::ns3opengym::SpaceDescription* SimInitMsg::release_obsspace() {
  // @@protoc_insertion_point(field_release:ns3opengym.SimInitMsg.obsSpace)
  
  ::ns3opengym::SpaceDescription* temp = obsspace_;
  obsspace_ = NULL;
  return temp;
}
void SimInitMsg::set_allocated_obsspace(::ns3opengym::SpaceDescription* obsspace) {
  delete obsspace_;
  obsspace_ = obsspace;
  if (obsspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SimInitMsg.obsSpace)
}

// optional .ns3opengym.SpaceDescription actSpace = 4;
bool SimInitMsg::has_actspace() const {
  return !_is_default_instance_ && actspace_ != NULL;
}
void SimInitMsg::clear_actspace() {
  if (GetArenaNoVirtual() == NULL && actspace_ != NULL) delete actspace_;
  actspace_ = NULL;
}
const ::ns3opengym::SpaceDescription& SimInitMsg::actspace() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.actSpace)
  return actspace_ != NULL ? *actspace_ : *default_instance_->actspace_;
}
::ns3opengym::SpaceDescription* SimInitMsg::mutable_actspace() {
  
  if (actspace_ == NULL) {
    actspace_ = new ::ns3opengym::SpaceDescription;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.SimInitMsg.actSpace)
  return actspace_;
}
::ns3opengym::SpaceDescription* SimInitMsg::release_actspace() {
  // @@protoc_insertion_point(field_release:ns3opengym.SimInitMsg.actSpace)
  
  ::ns3opengym::SpaceDescription* temp = actspace_;
  actspace_ = NULL;
  return temp;
}
void SimInitMsg::set_allocated_actspace(::ns3opengym::SpaceDescription* actspace) {
  delete actspace_;
  actspace_ = actspace;
  if (actspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SimInitMsg.actSpace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimInitAck::kDoneFieldNumber;
const int SimInitAck::kStopSimReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimInitAck::SimInitAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.SimInitAck)
}

void SimInitAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimInitAck::SimInitAck(const SimInitAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.SimInitAck)
}

void SimInitAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  done_ = false;
  stopsimreq_ = false;
}

SimInitAck::~SimInitAck() {
  // @@protoc_insertion_point(destructor:ns3opengym.SimInitAck)
  SharedDtor();
}

void SimInitAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimInitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInitAck_descriptor_;
}

const SimInitAck& SimInitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SimInitAck* SimInitAck::default_instance_ = NULL;

SimInitAck* SimInitAck::New(::google::protobuf::Arena* arena) const {
  SimInitAck* n = new SimInitAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimInitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.SimInitAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimInitAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimInitAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(done_, stopsimreq_);

#undef ZR_HELPER_
#undef ZR_

}

bool SimInitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.SimInitAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool done = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stopSimReq;
        break;
      }

      // optional bool stopSimReq = 2;
      case 2: {
        if (tag == 16) {
         parse_stopSimReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stopsimreq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.SimInitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.SimInitAck)
  return false;
#undef DO_
}

void SimInitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.SimInitAck)
  // optional bool done = 1;
  if (this->done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->done(), output);
  }

  // optional bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stopsimreq(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.SimInitAck)
}

::google::protobuf::uint8* SimInitAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.SimInitAck)
  // optional bool done = 1;
  if (this->done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->done(), target);
  }

  // optional bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stopsimreq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.SimInitAck)
  return target;
}

int SimInitAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.SimInitAck)
  int total_size = 0;

  // optional bool done = 1;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  // optional bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInitAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.SimInitAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimInitAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimInitAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.SimInitAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.SimInitAck)
    MergeFrom(*source);
  }
}

void SimInitAck::MergeFrom(const SimInitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.SimInitAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.done() != 0) {
    set_done(from.done());
  }
  if (from.stopsimreq() != 0) {
    set_stopsimreq(from.stopsimreq());
  }
}

void SimInitAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.SimInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInitAck::CopyFrom(const SimInitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.SimInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInitAck::IsInitialized() const {

  return true;
}

void SimInitAck::Swap(SimInitAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimInitAck::InternalSwap(SimInitAck* other) {
  std::swap(done_, other->done_);
  std::swap(stopsimreq_, other->stopsimreq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimInitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInitAck_descriptor_;
  metadata.reflection = SimInitAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimInitAck

// optional bool done = 1;
void SimInitAck::clear_done() {
  done_ = false;
}
 bool SimInitAck::done() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitAck.done)
  return done_;
}
 void SimInitAck::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitAck.done)
}

// optional bool stopSimReq = 2;
void SimInitAck::clear_stopsimreq() {
  stopsimreq_ = false;
}
 bool SimInitAck::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitAck.stopSimReq)
  return stopsimreq_;
}
 void SimInitAck::set_stopsimreq(bool value) {
  
  stopsimreq_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitAck.stopSimReq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EnvStateMsg_Reason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvStateMsg_Reason_descriptor_;
}
bool EnvStateMsg_Reason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvStateMsg_Reason EnvStateMsg::SimulationEnd;
const EnvStateMsg_Reason EnvStateMsg::GameOver;
const EnvStateMsg_Reason EnvStateMsg::Reason_MIN;
const EnvStateMsg_Reason EnvStateMsg::Reason_MAX;
const int EnvStateMsg::Reason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvStateMsg::kObsDataFieldNumber;
const int EnvStateMsg::kRewardFieldNumber;
const int EnvStateMsg::kIsGameOverFieldNumber;
const int EnvStateMsg::kReasonFieldNumber;
const int EnvStateMsg::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvStateMsg::EnvStateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.EnvStateMsg)
}

void EnvStateMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  obsdata_ = const_cast< ::ns3opengym::DataContainer*>(&::ns3opengym::DataContainer::default_instance());
}

EnvStateMsg::EnvStateMsg(const EnvStateMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.EnvStateMsg)
}

void EnvStateMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obsdata_ = NULL;
  reward_ = 0;
  isgameover_ = false;
  reason_ = 0;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EnvStateMsg::~EnvStateMsg() {
  // @@protoc_insertion_point(destructor:ns3opengym.EnvStateMsg)
  SharedDtor();
}

void EnvStateMsg::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete obsdata_;
  }
}

void EnvStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvStateMsg_descriptor_;
}

const EnvStateMsg& EnvStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

EnvStateMsg* EnvStateMsg::default_instance_ = NULL;

EnvStateMsg* EnvStateMsg::New(::google::protobuf::Arena* arena) const {
  EnvStateMsg* n = new EnvStateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.EnvStateMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnvStateMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnvStateMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reward_, isgameover_);
  if (GetArenaNoVirtual() == NULL && obsdata_ != NULL) delete obsdata_;
  obsdata_ = NULL;
  reason_ = 0;
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EnvStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.EnvStateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ns3opengym.DataContainer obsData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_reward;
        break;
      }

      // optional float reward = 2;
      case 2: {
        if (tag == 21) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isGameOver;
        break;
      }

      // optional bool isGameOver = 3;
      case 3: {
        if (tag == 24) {
         parse_isGameOver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgameover_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional .ns3opengym.EnvStateMsg.Reason reason = 4;
      case 4: {
        if (tag == 32) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::ns3opengym::EnvStateMsg_Reason >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional string info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ns3opengym.EnvStateMsg.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.EnvStateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.EnvStateMsg)
  return false;
#undef DO_
}

void EnvStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.EnvStateMsg)
  // optional .ns3opengym.DataContainer obsData = 1;
  if (this->has_obsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->obsdata_, output);
  }

  // optional float reward = 2;
  if (this->reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->reward(), output);
  }

  // optional bool isGameOver = 3;
  if (this->isgameover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isgameover(), output);
  }

  // optional .ns3opengym.EnvStateMsg.Reason reason = 4;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  // optional string info = 5;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.EnvStateMsg.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->info(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.EnvStateMsg)
}

::google::protobuf::uint8* EnvStateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.EnvStateMsg)
  // optional .ns3opengym.DataContainer obsData = 1;
  if (this->has_obsdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->obsdata_, false, target);
  }

  // optional float reward = 2;
  if (this->reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->reward(), target);
  }

  // optional bool isGameOver = 3;
  if (this->isgameover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isgameover(), target);
  }

  // optional .ns3opengym.EnvStateMsg.Reason reason = 4;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  // optional string info = 5;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.EnvStateMsg.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->info(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.EnvStateMsg)
  return target;
}

int EnvStateMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.EnvStateMsg)
  int total_size = 0;

  // optional .ns3opengym.DataContainer obsData = 1;
  if (this->has_obsdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->obsdata_);
  }

  // optional float reward = 2;
  if (this->reward() != 0) {
    total_size += 1 + 4;
  }

  // optional bool isGameOver = 3;
  if (this->isgameover() != 0) {
    total_size += 1 + 1;
  }

  // optional .ns3opengym.EnvStateMsg.Reason reason = 4;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // optional string info = 5;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.EnvStateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnvStateMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvStateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.EnvStateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.EnvStateMsg)
    MergeFrom(*source);
  }
}

void EnvStateMsg::MergeFrom(const EnvStateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.EnvStateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_obsdata()) {
    mutable_obsdata()->::ns3opengym::DataContainer::MergeFrom(from.obsdata());
  }
  if (from.reward() != 0) {
    set_reward(from.reward());
  }
  if (from.isgameover() != 0) {
    set_isgameover(from.isgameover());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
}

void EnvStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.EnvStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvStateMsg::CopyFrom(const EnvStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.EnvStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvStateMsg::IsInitialized() const {

  return true;
}

void EnvStateMsg::Swap(EnvStateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvStateMsg::InternalSwap(EnvStateMsg* other) {
  std::swap(obsdata_, other->obsdata_);
  std::swap(reward_, other->reward_);
  std::swap(isgameover_, other->isgameover_);
  std::swap(reason_, other->reason_);
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvStateMsg_descriptor_;
  metadata.reflection = EnvStateMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnvStateMsg

// optional .ns3opengym.DataContainer obsData = 1;
bool EnvStateMsg::has_obsdata() const {
  return !_is_default_instance_ && obsdata_ != NULL;
}
void EnvStateMsg::clear_obsdata() {
  if (GetArenaNoVirtual() == NULL && obsdata_ != NULL) delete obsdata_;
  obsdata_ = NULL;
}
const ::ns3opengym::DataContainer& EnvStateMsg::obsdata() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.obsData)
  return obsdata_ != NULL ? *obsdata_ : *default_instance_->obsdata_;
}
::ns3opengym::DataContainer* EnvStateMsg::mutable_obsdata() {
  
  if (obsdata_ == NULL) {
    obsdata_ = new ::ns3opengym::DataContainer;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvStateMsg.obsData)
  return obsdata_;
}
::ns3opengym::DataContainer* EnvStateMsg::release_obsdata() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvStateMsg.obsData)
  
  ::ns3opengym::DataContainer* temp = obsdata_;
  obsdata_ = NULL;
  return temp;
}
void EnvStateMsg::set_allocated_obsdata(::ns3opengym::DataContainer* obsdata) {
  delete obsdata_;
  obsdata_ = obsdata;
  if (obsdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvStateMsg.obsData)
}

// optional float reward = 2;
void EnvStateMsg::clear_reward() {
  reward_ = 0;
}
 float EnvStateMsg::reward() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.reward)
  return reward_;
}
 void EnvStateMsg::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.reward)
}

// optional bool isGameOver = 3;
void EnvStateMsg::clear_isgameover() {
  isgameover_ = false;
}
 bool EnvStateMsg::isgameover() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.isGameOver)
  return isgameover_;
}
 void EnvStateMsg::set_isgameover(bool value) {
  
  isgameover_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.isGameOver)
}

// optional .ns3opengym.EnvStateMsg.Reason reason = 4;
void EnvStateMsg::clear_reason() {
  reason_ = 0;
}
 ::ns3opengym::EnvStateMsg_Reason EnvStateMsg::reason() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.reason)
  return static_cast< ::ns3opengym::EnvStateMsg_Reason >(reason_);
}
 void EnvStateMsg::set_reason(::ns3opengym::EnvStateMsg_Reason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.reason)
}

// optional string info = 5;
void EnvStateMsg::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EnvStateMsg::info() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnvStateMsg::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.info)
}
 void EnvStateMsg::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.EnvStateMsg.info)
}
 void EnvStateMsg::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.EnvStateMsg.info)
}
 ::std::string* EnvStateMsg::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvStateMsg.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnvStateMsg::release_info() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvStateMsg.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnvStateMsg::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvStateMsg.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvActMsg::kActDataFieldNumber;
const int EnvActMsg::kStopSimReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvActMsg::EnvActMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3opengym.EnvActMsg)
}

void EnvActMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  actdata_ = const_cast< ::ns3opengym::DataContainer*>(&::ns3opengym::DataContainer::default_instance());
}

EnvActMsg::EnvActMsg(const EnvActMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.EnvActMsg)
}

void EnvActMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  actdata_ = NULL;
  stopsimreq_ = false;
}

EnvActMsg::~EnvActMsg() {
  // @@protoc_insertion_point(destructor:ns3opengym.EnvActMsg)
  SharedDtor();
}

void EnvActMsg::SharedDtor() {
  if (this != default_instance_) {
    delete actdata_;
  }
}

void EnvActMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvActMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvActMsg_descriptor_;
}

const EnvActMsg& EnvActMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

EnvActMsg* EnvActMsg::default_instance_ = NULL;

EnvActMsg* EnvActMsg::New(::google::protobuf::Arena* arena) const {
  EnvActMsg* n = new EnvActMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvActMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.EnvActMsg)
  if (GetArenaNoVirtual() == NULL && actdata_ != NULL) delete actdata_;
  actdata_ = NULL;
  stopsimreq_ = false;
}

bool EnvActMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3opengym.EnvActMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ns3opengym.DataContainer actData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stopSimReq;
        break;
      }

      // optional bool stopSimReq = 2;
      case 2: {
        if (tag == 16) {
         parse_stopSimReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stopsimreq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3opengym.EnvActMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3opengym.EnvActMsg)
  return false;
#undef DO_
}

void EnvActMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3opengym.EnvActMsg)
  // optional .ns3opengym.DataContainer actData = 1;
  if (this->has_actdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->actdata_, output);
  }

  // optional bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stopsimreq(), output);
  }

  // @@protoc_insertion_point(serialize_end:ns3opengym.EnvActMsg)
}

::google::protobuf::uint8* EnvActMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.EnvActMsg)
  // optional .ns3opengym.DataContainer actData = 1;
  if (this->has_actdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->actdata_, false, target);
  }

  // optional bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stopsimreq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.EnvActMsg)
  return target;
}

int EnvActMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.EnvActMsg)
  int total_size = 0;

  // optional .ns3opengym.DataContainer actData = 1;
  if (this->has_actdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->actdata_);
  }

  // optional bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvActMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3opengym.EnvActMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnvActMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvActMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3opengym.EnvActMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3opengym.EnvActMsg)
    MergeFrom(*source);
  }
}

void EnvActMsg::MergeFrom(const EnvActMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.EnvActMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_actdata()) {
    mutable_actdata()->::ns3opengym::DataContainer::MergeFrom(from.actdata());
  }
  if (from.stopsimreq() != 0) {
    set_stopsimreq(from.stopsimreq());
  }
}

void EnvActMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3opengym.EnvActMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvActMsg::CopyFrom(const EnvActMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.EnvActMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvActMsg::IsInitialized() const {

  return true;
}

void EnvActMsg::Swap(EnvActMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvActMsg::InternalSwap(EnvActMsg* other) {
  std::swap(actdata_, other->actdata_);
  std::swap(stopsimreq_, other->stopsimreq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvActMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvActMsg_descriptor_;
  metadata.reflection = EnvActMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnvActMsg

// optional .ns3opengym.DataContainer actData = 1;
bool EnvActMsg::has_actdata() const {
  return !_is_default_instance_ && actdata_ != NULL;
}
void EnvActMsg::clear_actdata() {
  if (GetArenaNoVirtual() == NULL && actdata_ != NULL) delete actdata_;
  actdata_ = NULL;
}
const ::ns3opengym::DataContainer& EnvActMsg::actdata() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvActMsg.actData)
  return actdata_ != NULL ? *actdata_ : *default_instance_->actdata_;
}
::ns3opengym::DataContainer* EnvActMsg::mutable_actdata() {
  
  if (actdata_ == NULL) {
    actdata_ = new ::ns3opengym::DataContainer;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvActMsg.actData)
  return actdata_;
}
::ns3opengym::DataContainer* EnvActMsg::release_actdata() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvActMsg.actData)
  
  ::ns3opengym::DataContainer* temp = actdata_;
  actdata_ = NULL;
  return temp;
}
void EnvActMsg::set_allocated_actdata(::ns3opengym::DataContainer* actdata) {
  delete actdata_;
  actdata_ = actdata;
  if (actdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvActMsg.actData)
}

// optional bool stopSimReq = 2;
void EnvActMsg::clear_stopsimreq() {
  stopsimreq_ = false;
}
 bool EnvActMsg::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvActMsg.stopSimReq)
  return stopsimreq_;
}
 void EnvActMsg::set_stopsimreq(bool value) {
  
  stopsimreq_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvActMsg.stopSimReq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ns3opengym

// @@protoc_insertion_point(global_scope)
